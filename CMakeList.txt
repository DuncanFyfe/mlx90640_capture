cmake_minimum_required(VERSION 3.10)

project(app VERSION 1.0.0)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "-std=c++${CMAKE_CXX_STANDARD} -Wall -W -Werror -fPIC")

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
target_link_libraries(app PRIVATE Threads::Threads)

find_package(Protobuf REQUIRED)
include_directories(${Protobuf_INCLUDE_DIRS})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS src/mlx90640_buffer.proto)
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS DESCRIPTORS PROTO_DESCS src/mlx90640_buffer.proto)
protobuf_generate_python(PROTO_PY src/mlx90640_buffer.proto)
target_link_libraries(app PRIVATE ${Protobuf_LIBRARIES})

# Add MLX90640 
find_path(MLX90640_HEADER MLX90640)
target_include_directories(app PUBLIC ${MLX90640_HEADER})

find_library(MLX90640_LIB MLX90640_API)
target_link_libraries(app ${MLX90640_LIB})

# Add hiredis
find_path(HIREDIS_HEADER hiredis)
target_include_directories(app PUBLIC ${HIREDIS_HEADER})

find_library(HIREDIS_LIB hiredis)
target_link_libraries(app ${HIREDIS_LIB})

# Add redis-plus-plus
find_path(REDIS_PLUS_PLUS_HEADER sw)
target_include_directories(app PUBLIC ${REDIS_PLUS_PLUS_HEADER})

find_library(REDIS_PLUS_PLUS_LIB redis++)
target_link_libraries(app ${REDIS_PLUS_PLUS_LIB})

set(APP_SOURCE_DIR src)
set(APP_SOURCES 
	"${APP_SOURCE_DIR}/mlx90640_capture.cpp"
)


configure_file("${APP_SOURCE_DIR}/app_config.h.in" app_config.h)
target_include_directories(app PRIVATE src "${PROJECT_BINARY_DIR}")


set(SOURCE_FILES )
add_executable(mlx90640_capture ${SOURCE_FILES} ${PROTO_SRCS} ${PROTO_HDRS})
